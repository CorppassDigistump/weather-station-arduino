<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="6HourData" xml:space="preserve">
    <value>6小时数据</value>
  </data>
  <data name="6HourDataSmall" xml:space="preserve">
    <value>取每小时的第一个数据</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>张高兴</value>
  </data>
  <data name="Dust" xml:space="preserve">
    <value>可吸入颗粒物</value>
  </data>
  <data name="Humidity" xml:space="preserve">
    <value>相对湿度</value>
  </data>
  <data name="I1" xml:space="preserve">
    <value>该项目包含一个基于 Arduino 的气象数据收集装置、一个 ASP.NET Core MVC 数据展示页以及一个 ASP.NET Core WebAPI 。收集的数据使用 ESP8266 发送，通过 WebAPI 写入SQL Server 数据库。气象数据收集装置由以下几个部分组成：</value>
  </data>
  <data name="I21" xml:space="preserve">
    <value>Arduino Nano</value>
  </data>
  <data name="I210" xml:space="preserve">
    <value>18650 锂电池与充放电板（可选）</value>
  </data>
  <data name="I211" xml:space="preserve">
    <value>BME280 - 温度、湿度、气压传感器</value>
  </data>
  <data name="I22" xml:space="preserve">
    <value>Nano Shield</value>
  </data>
  <data name="I23" xml:space="preserve">
    <value>AM2320 - 温度、湿度传感器</value>
  </data>
  <data name="I24" xml:space="preserve">
    <value>BMP280 - 气压传感器</value>
  </data>
  <data name="I25" xml:space="preserve">
    <value>ML8511 - 紫外线传感器（弃用）</value>
  </data>
  <data name="I26" xml:space="preserve">
    <value>GP2Y1010F45 - 灰尘传感器</value>
  </data>
  <data name="I27" xml:space="preserve">
    <value>DS3231 - 时钟</value>
  </data>
  <data name="I28" xml:space="preserve">
    <value>ESP8266 - WIFI</value>
  </data>
  <data name="I29" xml:space="preserve">
    <value>SD 卡模块</value>
  </data>
  <data name="I3" xml:space="preserve">
    <value>气象数据收集装置部署位置大约在北纬 34°，东经117°，背阴，距离地表约 15m 。</value>
  </data>
  <data name="I4" xml:space="preserve">
    <value>收集的数据不保证精确性，不作气象预报用途，仅用于满足个人爱好。</value>
  </data>
  <data name="Introduction" xml:space="preserve">
    <value>简介</value>
  </data>
  <data name="LatestData" xml:space="preserve">
    <value>最新数据</value>
  </data>
  <data name="LatestDataSmall" xml:space="preserve">
    <value>取数据库中的最新数据</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>或</value>
  </data>
  <data name="Pressure" xml:space="preserve">
    <value>气压</value>
  </data>
  <data name="ProjectName" xml:space="preserve">
    <value>气象数据收集装置</value>
  </data>
  <data name="Temperature" xml:space="preserve">
    <value>环境温度</value>
  </data>
  <data name="Time" xml:space="preserve">
    <value>时间</value>
  </data>
  <data name="UV" xml:space="preserve">
    <value>紫外线指数</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>欢迎来到Arduino实现的气象数据收集装置</value>
  </data>
  <data name="WelcomeSmall" xml:space="preserve">
    <value>了解该项目的详细实现步骤：</value>
  </data>
</root>